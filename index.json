{
  "articles/Wewnętrzne/Procedury/Dokumentacja/Instalacja_i_Konfiguracja_VSCode.html": {
    "href": "articles/Wewnętrzne/Procedury/Dokumentacja/Instalacja_i_Konfiguracja_VSCode.html",
    "title": "[GEEKOUT] Visual Studio Code Instalacja i konfiguracja",
    "keywords": "[GEEKOUT] Visual Studio Code Instalacja i konfiguracja Opis narzędzia Visual Studio Code jest zaawansowanym i przyjaznym użytkownikowi edytorem plików tekstowych, który dzięki bogatemu zestawowi rozszerzeń potrafi zaspokoić potrzeby praktycznie każdego użytkownika. Co znajdziesz w tym dokumencie Instalacja VS Code Instalacja sprawdzania pisowni Instalacja Git for Windows Podłączenie do repozytorium dokumentacji Instalacja rozszerzenia do pracy z Azure Dev Ops Instalacja VS Code W przeglądarce przechodzimy do strony i wybieramy User Instaler x64 Dla Windows Uruchamiamy instaltor i zostawiamy język Angielski Akceptujemy licencję Wybieramy folder instalacji Wybieramy nazwę w Menu Start Wybieramy dodatkowe parametry Przeprowadzamy instalcje Gotowe - uruchamiamy VS Code w celu dalszej konfiguracji Instalacja dodatku sprawdzania języka polskiego Aby przejść do zarządzania rozszerzeniami używamy sktóru ctrl+shift+x albo klikamy na lewym pasu ikonę Wpiszujamy wyraz polish i w znalezionym rozszerzeniu Polish Support for LenguageTool klikamy VSCInstallStep1 Musimy jeszcze zainstalować (może już być zainstalowany) dodatek LanguageTool for Visual Studio Code więc wpisujemy jego nazwę do wyszukiwania Przechodzimy do ustawień za pomocą skrótu ctrl+, bądź korzystająć z ikony zarządzania na lewym pasu i wybierając opcje Settings W wyszukiwaniu wpisujemy languageTool Ustawiamy język na pl - gotowe. Jeżeli na komputrzenie nie ma zainstalowanej Java (min wersja 8.0) należy doinstalować -> Instaltor Instalacja Git for Windows Instalujemy na komputerze Git for Windows Akceptujemy licencje Wybieramy katalog instalacji Zostawiamy domyślnie zaznaczone opcje Wybieramy folder w menu start Wybieramy VS Code jako domyślny edytor dla Git Zostawiamy domyślną opcje używania git w lini poleceń Zostawiamy domyślną opcje dla protokołu HTTPS Zostawiamy domyślną opcje konwersji końca lini Ustawiamy linie poleceń widnows Dodatkowe opcje zostawiamy domyślne Nie włączamy eksperymentalnych opcji i instalujemy i gotowe. Podłączenie do repozytorium dokumentacji git Przechodzimy w przeglądarce do witryny Używamy przycisku Colne w prawej sekcji witryny i klikamy przycisk Clone in VS Code Potwierdzamy otwarcie VS Code Zezwalamy na otwarcie url Wyniremalu folder trzymania repozytorium np. D:\\repos\\dokumentacja i klikamy przycisk select reposytory lokalization Nastąpi krótkotrwały proces klonowania repozytorium po jego zakończeniu wybieramy opcję Open Gotowe - możemy pracować na repozytorium Uruchamiamy VS Code i z Menu Terminal uruchamiamy NewTerminal można zastosować sktót ctrl+shift+` Połączenie i Praca z Azure DevOps Instalujemy rozszerzenie Azure Repos"
  },
  "articles/Wewnętrzne/Procedury/Dokumentacja/Opis_Aplikacji.html": {
    "href": "articles/Wewnętrzne/Procedury/Dokumentacja/Opis_Aplikacji.html",
    "title": "DOKUMENTACJA W FORMIE PUBLICZNEJ - DOCFX, AZURE PIPELINES, GITHUB PAGES",
    "keywords": "DOKUMENTACJA W FORMIE PUBLICZNEJ - DOCFX, AZURE PIPELINES, GITHUB PAGES Poniższa dokumentacja dotyczy przykładowego rozwiązania znajdującego się pod adresem: https://soneta.github.io/docfx-soneta/ FlowChart aplikacji Opis schematu Tworzymy nowy projekt dokumentacji z wykorzystaniem DocFX. Za pomocą Visual Studio Code dokonujemy w nim wszelkich zmian. Inicjujemy lokalne repozytorium. Następnie wykonujemy push do Github na branch master (na nim bedzie historia zmian zwiazana z zawartoscia artykułów). Po wykonaniu commita zostaje automatycznie uruchomiony pipeline na Azure DevOps, który pobiera kod z naszego repozytorium na github, buduje go generując statyczne strony dokumentacji Następnie publikuje tj. wykonuje commit powrotny do naszego repozytorium na github z tym że tym razem commit dotyczy brancha gh-pages (branch który jest źródłem dla GitHub Pages). W momencie poprawnego zakończenia pracy pipeline'a oraz wykonaniu commita, strona prezentująca naszą dokumentację (GitHub Pages) zostaje uzupełniona o zmiany przez nas dokonane. Wskazówki DocFX Zapoznać się z dokumentacją: https://dotnet.github.io/docfx/ Stworzyć własny projekt zgodnie z instrukcją w dokumentacji Visual Studio Code Dostosować utworzony standardowo projekt według swoich indywidualnych preferencji i potrzeb. Dodatek do VSC pomagąjący w pracy z DocFX: https://marketplace.visualstudio.com/items?itemName=tintoy.docfx-assistant Dodatek wspomagający pracę z plikami md: https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint Kod źródłowy dokumentacji DocFX (przykładowy kod): https://github.com/dotnet/docfx Krótkie kursy tutoriale użytkowników: https://www.youtube.com/watch?v=R4zLtuTbsBM http://www.hardkoded.com/blog/creating-docfx-site Gotowy projekt zainicjować jako repozytorium git (w terminalu Visual Studio Code), a następnie zgodnie z instrukcją: https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line utworzyć nowe repozytorium na GitHub oraz dostarczyć tam swój projekt. Github Na nowo utworzonym repozytorium na Github powinny znajdować się min. 2 branche: master (tworzony automatycznie) oraz \"czysty\" branch gh-pages (instrukcja utworzenia: https://gist.github.com/ramnathv/2227408 ) Kolejnym krokiem powinno być skonfigurowanie Github Pages. W tym celu należy podążać zgodnie ze wskazówkami wskazanymi w dokumentacjach: https://pages.github.com/ https://help.github.com/en/github/working-with-github-pages/creating-a-github-pages-site Następnie do github należy \"podpiąć\" dwie aplikacje: Azure Pipelines (aplikacja umożliwiająca połączenie z Azure DevOps) https://github.com/marketplace/azure-pipelines utterances (aplikacja umożliwiająca skorelowanie komentarzy artykułów na GitHub Pages z issue na GitHub) https://github.com/apps/utterances https://utteranc.es/ https://developer.github.com/apps/installing-github-apps/ Azure DevOps W pierszym kroku należy utworzyć projekt na Azure DevOps https://docs.microsoft.com/en-us/azure/devops/organizations/projects/create-project?view=azure-devops&tabs=preview-page Następnie w zakładce pipelines tworzymy nowy pipeline oraz korelujemy go z naszym repozytorium na GitHub https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml https://www.azuredevopslabs.com/labs/azuredevops/github-integration/ https://www.azuredevopslabs.com/labs/vstsextend/github-azurepipelines/ W utworzonym pipeline należy wykorzystać dwa taski: Budowa statycznego contentu z którego będzię korzystał GitHub Pages: https://marketplace.visualstudio.com/items?itemName=chrismason.vsts-docfxtasks Publikacja w/w contentu powrotnie do repozytorium na github a tym samym zasilenie GitHub Pages: https://marketplace.visualstudio.com/items?itemName=AccidentalFish.githubpages-publish W ustawieniach pipeline w zakładce Triggers ustawić automatyczne triggerowanie w przypadku pojawienia się nowego commita na branchu master."
  },
  "articles/Wewnętrzne/Procedury/Dokumentacja/README.html": {
    "href": "articles/Wewnętrzne/Procedury/Dokumentacja/README.html",
    "title": "",
    "keywords": "Folder zawiera artykuły dotyczące tworzenia dokumentacji."
  },
  "articles/Wewnętrzne/Procedury/README.html": {
    "href": "articles/Wewnętrzne/Procedury/README.html",
    "title": "",
    "keywords": "Folder zbiera dokumenty procedur związanych z produkcją."
  },
  "articles/Wewnętrzne/Projekty/UserEducation/Ulotka.html": {
    "href": "articles/Wewnętrzne/Projekty/UserEducation/Ulotka.html",
    "title": "",
    "keywords": "Ulotka marketingowa (klienta) 1.Struktura Wstęp - stały tekst +numer i data wersji (skąd to pobierać) Spis teraści wg interfejsów Standard i multi dalej wg modułów. Podział dokumentacji moduowej na kategorie Błąd /Zmiana działania/Nowa funkcja Zamiany wypunktoane W treści pojedynczego wpisu Obszar+tresć z dokumenatcji danego user story Jeśli wstawiono link do bazy wiedzy pobierać odpowienio z podmianą adresu na tutaj. 2.Miejsce uzupełnienia dokumentacji - user story. Pola na user story służące udokumentowaniu: Dokumentation - treść z pola Cocumentation Moduł -Area jeśli (Soneta\\Księgowość\\Deklaracje CIT) to Księgowość Obszar - Areas jeśli (Soneta\\Księgowość\\Deklaracje CIT) to Deklaarcje CIT to obszar Dokumentation positioning - kolejność (jakie wartości - ustaić) Do udokumentowania - czy dokumentujemy w ulotce Interfejs - Okienkowy/Dotykowy/przeglądarkowy/komórkowy Platyna (Tak/Nie) - Dodać pole Kategoria - Wydruk/Standard/Dodatek/Komunikat techniczny ! Na taskach należy zablokować możliwosć dodawania dokumentacji, taka mozliwość powinna być dostępna tylko dla user story. Nowa szata graficzna -Marketing (po konferencji) Zachować strukture, zmienić wizualnie ulotkę kafelki z modułami po klinknieciu przejscie do modułu, każdy moduł w wydzielonej sekcji (kolory modułowe)."
  },
  "articles/Wewnętrzne/Projekty/Wsparcie/Projekt_prowadzenie_wsparcia_w_CRM.html": {
    "href": "articles/Wewnętrzne/Projekty/Wsparcie/Projekt_prowadzenie_wsparcia_w_CRM.html",
    "title": "Projekt koncepcji prowadzenie wsparcia w oparciu o moduł CRM",
    "keywords": "Projekt koncepcji prowadzenie wsparcia w oparciu o moduł CRM ##Struktura Kampania – główne działy firmy (Dział Produkcji, Dział Wsparcia, Dział Sprzedaży, Zarząd i wsparcie zarządu). Projekty - jako uszczegółowienie Kampanii • Dział Produkcji i Dział wsparcia moduły: Księga, Kadry płace itp… (zgodne z azuredevops), • Dział sprzedaży: Marketing, Zespół Accantmenagerów, DWS. • Zarząd i wsparcie zarządu: Prezes, HR, Recepcja Zadania - zgłoszenia serwisowe, inne zadania Zdarzenia - rejestracja telefonów Procesy Procesy podstawowe: W zakresie wsparcia partnerów: Zdarzenie (incydent) ->znamy rozwianie- >Zamykamy zdarzenie I. Telefon Nowe zdarzenie -> Wybieramy Pola na formularzu do uzupełnienia: Partner lub/i Klient (możliwosć wyszukania po licencji), Tytuł (Nazwa), Treść(Opis),Prowadzący (pracownik sonety), Przedstawiciel, liczkik,Stan zadania, Powinny wyświetlać się dodatkowe informacje o kliencie (np.Zakaz kontaktu)-> Po zakończonym zdarzeniu pytanie czy utworzyć zadania (wybieramy jeśli temat nie zakończony)-> Jeśli wybrano \"Nie\" zadrzenie zamykykane ze stanem Zakończony. Nowe zdarzenie -> Wybieramy Pola na formularzu do uzupełnienia: Partner lub/i Klient (możliwosć wyszukania po licencji), Tytuł (Nazwa), Treść(Opis),Prowadzący (pracownik sonety), Przedstawiciel, liczkik,Stan zadania, Powinny wyświetlać się dodatkowe informacje o kliencie (np.Zakaz kontaktu)-> Po zakończonym zdarzeniu pytanie czy utworzyć zadania (wybieramy jeśli temat nie zakończony)->zamykamy zdarzenie tworzac zadanie po zatwierdzeniu \"Tak\" generowane jest nowe zadanie wybór definicji, Otwiera się formularz zadania ->Uzupełniamy dodatkowe iformacje priorytet, stan zgłoszony.???? Zdarzenie ->nie znamy rozwiązania-> zamykamy zdarzenie tworzac zadanie-> Analiza (nowe zadanie) - > nie mamy rozwiązania -> Przekazanie na produkcje (Aure Devops) - > zwrotna informacja o zakończonym zadaniu. 2.Procesy Dodatkowe Zadanie (nowe zadanie zlecone przez inny dział) - > Analiza / realizacja-> Zamykamy zadanie Zadanie (nowe zadanie zlecone przez inny dział) - > Analiza -> nie znamy rozwiązania -> Przekazanie na produkcje (Aure Devops) - > zwrotna informacja o zakończonym zadaniu. Do analizy skrócenie procesu, druga linia wsparcia określenie osoby z dzialu produkcji !!!! Mapowanie do istniejących pól 1.Zadanie - zgłoszenie serwisowe Tytuł - Nazwa (Zadanie) Treść zgłoszenia - Opis (Zadanie) Prowadzący pracownik Sonety - Prowadzący (Zadanie) Osoba kontaktowa - Przedstawiciel (Zadanie) Partner - Do dodania Klient - Do dodania Stan - Satan(Zadania) Zgłoszony – Partner zgłosił ale jeszcze nikt nie przeanalizował Analizowany – Konsultant analizuje temat W realizacji – przyjęto do realizacji, np. poprawiamy błąd w produkcji Zakończony – temat zrealizowany produkcyjnie/udzielono wsparcia Lub informacja o tym że temat został odrzucony nie będziemy realizować Anulowany- partner sam anulował zgłoszenie Typ (bład, nowa funkcja programistyczne reklamacja) - Do dodania Nie może to być defnicja bo jest niezmienna! Numer wersji - Do dodania Tryb zgłoszenia - Definicja zgłoszenia (Zadania) Interfejs - Do dodania Moduł - Do dodania - zgodny z azuredevops i cennikiem Obaszar - Do dodania Data zgłoszenia - Rozpoczęcie (Zadania) Data zakończenia - Zakończenie (Zadania) Stoper (Zadania) Nazwa produktu (enova365 oraz Triva) Notataka - Uwagi (Zadania) Załaczniki - Asystent(Zadanie) Priorytet (Krytyczny/Wysoki/Normalny/Niski) - Pryiorytet (Zadania) Informacja o kliencie/partnarze - Do dodania pobierać z kartoteki kontrahenta Uwagi handlowe? Słowa kluczowe - pole słownikowe - Do dodania - pole które pozwoli nam wyszukiwać rozwiazania z załatwionych Baza wiedzy - linki Do dodania Informacja o licencji 1.Zdarzenie (incydent) - zgłoszenie telefoniczne Tytuł - Nazwa (Zdarzenie) Treść zgłoszenia - Opis (Zdarzenie) Prowadzący pracownik Sonety - Prowadzący (Zdarzenie) Osoba kontaktowa - Przedstawiciel (Zdarzenie) Partner - Do dodania Klient - Do dodania Stan (rózny dla definicji) - Stan (Zdarzenie) Typ (bład, nowa funkcja programistyczne reklamacja) - Do dodania Nie może to być defnicja bo jest niezmienna! Numer wersji - Do dodania Tryb zgłoszenia - Definicja zgłoszenia (Zdarzenia) Interfejs - Do dodania Moduł - Do dodania - zgodny z azuredevops i cennikiem Obaszar - Do dodania Data zgłoszenia - Rozpoczęcie (Zadania) Data zakończenia - Zakończenie (Zadania) Stoper (Zadania) Nazwa produktu (enova365 oraz Triva) Notataka - Uwagi (Zadania) Załaczniki - Asystent(Zadanie) Informacja o kliencie/partnarze - Do dodania pobierać z kartoteki kontrahenta Uwagi handlowe? Słowa kluczowe - pole słownikowe - Do dodania - pole które pozwoli nam wyszukiwać rozwiazania z załatwionych Baza wiedzy - linki Do dodania Informacja o licencji Konfiguracja Defincije zadań Zgłoszenie Serwisowe -ZS/Rok/kolejny Numer Stan - Stan(Zadania) Zgłoszony – Partner zgłosił ale jeszcze nikt nie przeanalizował Analizowany – Konsultant analizuje temat W realizacji – przyjęto do realizacji, np. poprawiamy błąd w produkcji Zakończony – temat zrealizowany produkcyjnie/udzielono wsparcia Lub informacja o tym że temat został odrzucony nie będziemy realizować Anulowany- partner sam anulował zgłoszenie Zgłoszenie Wewnętrzne - ZW/Rok/lolejny numer Stan: Zgłoszony W realizacji Zakończony Anulowany Komunikat - KOM/rok/kolejny numer (zastępuje globalne zgłoszenie) Szkolenie - SZ/rok/kolejny numer (szkolenie prezentacja) Stan: Zgłoszony W realizacji Zakończony Anulowany Definicje zdarzeń Zgłoszenie telefoniczne ZT/Rok/kolejny numer Stan: W realizacji Zakończony Formularz użytkownika 4.integracja zmiana stanu eksportuje do AzureDevops Komunikacja z działęm spzredaży- informacja z cechy zakas kontaktu Dodatkowe komunikaty o partnerze kliencie do ustalenia z działem sprzedaży."
  },
  "articles/Wewnętrzne/readme.html": {
    "href": "articles/Wewnętrzne/readme.html",
    "title": "",
    "keywords": "Folder zawiera repozytorium dokumentacji wewnętrznej soneta"
  },
  "index.html": {
    "href": "index.html",
    "title": "O nas",
    "keywords": "O nas Soneta sp. z o.o. jest polskim producentem oprogramowania do zarządzania i księgowości – enova365. Dzięki wykorzystaniu najnowszych technologii, wiedzy eksperckiej oraz kompetentnej obsłudze, firma odniosła sukces rynkowy. Producent, jako pierwszy w Polsce udostępnił swój system w chmurze oraz wprowadzając dodatkowe interfejsy oparte o zasady Modern UI, umożliwił swoim użytkownikom korzystanie z systemu na wielu urządzeniach ( w tym tabletach i smartfonach). Firma powstała w 2002 r. szybko zdobywając uznanie tysięcy Użytkowników. Jej przełom nastąpił w 2007 r. kiedy to Soneta zanotowała dynamikę sprzedaży ponad 50% w stosunku do roku wcześniejszego i zdecydowała się na niemal dwukrotny wzrost zatrudnienia. Od tego czasu firma notuje stały wzrost obrotów rzędu 30%. Starając się sprostać rosnącym oczekiwaniom Klientów i wyzwaniom stwarzanym przez nowe technologie, w tym upowszechnienie urządzeń mobilnych, kilka lat temu firma podjęła decyzje o rozbudowie dotychczasowego, okienkowego systemu ERP enova, w kierunku cloud computing. Efektem tych działań jest udostępniona w 2013 r. platformy enova365 z interfejsem przeglądarkowy obsługujący HTML5. Wychodząc naprzeciw rosnącym wymaganiom i potrzebom użytkowników enova365, a także chcąc dotrzeć do nowych grup odbiorców, firma zdecydowała się rozwijać system dalej w kierunku Modern UI. W 2014 r. enova365 przystosowana została do pracy na Windows 8 i Windows Phone, gdzie możliwe jest korzystanie z aplikacji za pomocą gestu. Okienkowa enova stała się częścią enova365, jako logika biznesowa oraz jeden z jej interfejsów. System zmienił nazwę na enova365. Firma działa w oparciu o sieć 230 Autoryzowanych Partnerów na terenie całej Polski. Podstawowym przedmiotem ich działalności jest sprzedaż i wdrożenie oprogramowania enova oraz świadczenie usług, w celu zapewnienia klientom dostępu do kompleksowych rozwiązań biznesowych. Wybrani klienci: Alior Bank, Muzeum Łazienki Królewskie w Warszawie, Gerlach S.A., Axel Springer, Delikatesy Piotr i Paweł, Fundacja Anny Dymnej Mimo Wszystko, Ministerstwo Edukacji Narodowej, Krośnieńskie Huty Szkła „KROSNO”, Stowarzyszenie Księgowych w Polsce, Uniwersytet Ekonomiczny w Krakowie."
  }
}